{"version":3,"sources":["PickContext.js","questions.js","data.js","Pick.js","App.js","reportWebVitals.js","index.js"],"names":["PickContext","createContext","PickContextProvider","props","useState","selections","current","0","configurations","setConfigurations","Provider","value","children","questions","flavor","id","title","links","default","link","dataset","back","linkKey","images","text","audio","architecture","train","colors","defaultDataSet","borderWidth","selectionData","data","Object","keys","MI_class_results","reduce","all","x","mi_auc","configurationKeys","filter","fetchConfigurationData","configuration","a","filepath","name","filekey","key","fetch","response","json","results","console","log","configurationData","chartData","selectionKeys","labels","Set","sort","keyData","label","toUpperCase","datasets","map","i","index","color","backgroundColor","borderColor","dataSet","y","Section","autoslide","Button","questionKey","buttonType","onClick","useContext","split","questionValue","setSelection","updated","href","className","Question","config","currentConfig","linksKey","Training","useEffect","newConfigurations","keyAndData","getChartData","ResultSection","refreshToken","style","flex","height","minHeight","options","maintainAspectRatio","responsive","Results","Date","now","display","alignItems","justifyContent","length","nextId","Pick","App","Reveal","initialize","center","history","controls","keyboard","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aba07543.chunk.js","sourcesContent":["import { useState, createContext } from \"react\"\n\nexport const PickContext = createContext()\n\nexport const PickContextProvider = (props) => {\n  const [configurations, setConfigurations] = useState({\n    selections: { current: 0, 0: {} },\n  })\n\n  return (\n    <PickContext.Provider value={[configurations, setConfigurations]}>\n      {props.children}\n    </PickContext.Provider>\n  )\n}\n","const questions = {\n  flavor: {\n    id: \"flavor\",\n    title: \"Pick your flavor\",\n    links: {\n      default: [\n        { title: \"Images\", link: \"dataset#images\" },\n        { title: \"Text\", link: \"dataset#text\" },\n        { title: \"Audio\", link: \"dataset#audio\" },\n      ],\n    },\n  },\n  dataset: {\n    id: \"dataset\",\n    title: \"Pick your dataset\",\n    back: \"flavor\",\n    linkKey: \"flavor\",\n    links: {\n      default: [],\n      images: [\n        { title: \"CFAR10\", link: \"architecture#cfar10\" },\n        { title: \"EMNIST\", link: \"architecture#emnist\" },\n      ],\n      text: [\n        { title: \"Sentiment 140\", link: \"architecture#sentiment140\" },\n        { title: \"Purchase-100\", link: \"architecture#purchase100\" },\n      ],\n      audio: [\n        { title: \"LibreSpeech\", link: \"architecture#LibreSpeech\" },\n        {\n          title: \"Spoken Digit (FSDD)\",\n          link: \"architecture#SpokenDigit\",\n        },\n      ],\n    },\n  },\n  architecture: {\n    id: \"architecture\",\n    title: \"Pick your architecture\",\n    back: \"dataset\",\n    links: {\n      default: [\n        { title: \"dan4stacks\", link: \"train#dan4stacks\" },\n        { title: \"resnetv1\", link: \"train#resnetv1\" },\n      ],\n    },\n  },\n  train: {\n    id: \"train\",\n    title: \"How do you want to train your model?\",\n    back: \"architecture\",\n    links: {\n      default: [\n        { title: \"Natural\", link: \"training#natural\" },\n        { title: \"Robust\", link: \"training#robust\" },\n        { title: \"PATE\", link: \"training#pate\" },\n        { title: \"DP-SGD\", link: \"training#dp-sgd\" },\n      ],\n    },\n  },\n}\n\nexport default questions\n","const colors = [\"0,0,255\", \"255,0,0\", \"0,255,0\", \"255,0,255\"]\n\nconst defaultDataSet = {\n  borderWidth: 1,\n}\n\nconst dataSet = (index) => {\n  const color = colors[index]\n  const backgroundColor = `rgba(${color},0.4)`\n  const borderColor = `rgba(${color},0.7)`\n  return {\n    ...defaultDataSet,\n    backgroundColor,\n    borderColor,\n  }\n}\n\nconst selectionData = (data) =>\n  Object.keys(data.MI_class_results || {}).reduce(\n    (all, x) => ({ ...all, [x]: data.MI_class_results[x].mi_auc }),\n    {}\n  )\n\nexport const configurationKeys = (configurations) =>\n  Object.keys(configurations).filter(\n    (x) => typeof configurations[x] === \"object\"\n  )\n\nconst fetchConfigurationData = async (configuration) => {\n  const key = (x) => `${x.flavor}_${x.dataset}_${x.architecture}_${x.train}`\n  const filepath = (name) => `./data/${name}.json`\n  const filekey = key(configuration)\n  let results\n  try {\n    const response = await fetch(filepath(filekey))\n    results = await response.json()\n  } catch (e) {\n    console.log(`No data file available for configuration ${filekey}`)\n    const response = await fetch(filepath(\"missing_data\"))\n    results = await response.json()\n  }\n  return [filekey, results]\n}\n\nexport const configurationData = async (configuration) => {\n  const [key, json] = await fetchConfigurationData(configuration)\n  return {\n    key,\n    data: selectionData(json),\n  }\n}\n\nexport const chartData = (selections) => {\n  const selectionKeys = configurationKeys(selections)\n  const hasData = selectionKeys.reduce(\n    (all, x) => all && \"data\" in selections[x],\n    true\n  )\n  if (hasData) {\n    const labels = [\n      ...new Set(\n        selectionKeys.reduce(\n          (all, x) => [...all, ...Object.keys(selections[x].data || {})],\n          []\n        )\n      ),\n    ].sort()\n    const keyData = selectionKeys.reduce(\n      (all, x) => ({\n        ...all,\n        [selections[x].key]: {\n          data: selections[x].data,\n          label: `MI AUC (${selections[x].flavor}/${selections[x].dataset}/${selections[x].architecture}/${selections[x].train})`.toUpperCase(),\n        },\n      }),\n      {}\n    )\n    return {\n      labels,\n      datasets: Object.keys(keyData).map((x, i) => {\n        return {\n          ...dataSet(i),\n          label: keyData[x].label,\n          data: labels.map((y) => keyData[x].data[y]),\n        }\n      }),\n    }\n  } else return {}\n}\n","import { PickContextProvider, PickContext } from \"./PickContext\"\nimport { useContext, useEffect } from \"react\"\nimport questions from \"./questions\"\nimport { configurationData, chartData, configurationKeys } from \"./data\"\nimport { Bar } from \"react-chartjs-2\"\n\nconst Section = ({ id, title, children, autoslide = 0 }) => {\n  const props = {\n    id,\n    \"data-transition\": \"slide\",\n  }\n  if (autoslide > 0) {\n    props[\"data-autoslide\"] = autoslide\n  }\n  return (\n    <section {...props}>\n      <h3>{title}</h3>\n      {children}\n    </section>\n  )\n}\n\nconst Button = ({\n  title,\n  link,\n  questionKey,\n  buttonType = \"pick\",\n  onClick = () => null,\n}) => {\n  const [configurations, setConfigurations] = useContext(PickContext)\n  const [linkKey, questionValue] = link.split(\"#\")\n  const setSelection = () => {\n    if (questionKey) {\n      const updated = {\n        ...configurations,\n        selections: {\n          ...configurations.selections,\n          [configurations.selections.current]: {\n            ...configurations.selections[configurations.selections.current],\n            [questionKey]: questionValue,\n          },\n        },\n      }\n      setConfigurations(updated)\n    }\n    onClick()\n  }\n\n  return (\n    <a\n      href={`#/${linkKey}`}\n      className={buttonType}\n      onClick={() => setSelection()}\n    >\n      {title}\n    </a>\n  )\n}\n\nconst Question = ({ config }) => {\n  const [configurations] = useContext(PickContext)\n  const currentConfig =\n    configurations.selections[configurations.selections.current]\n  const linksKey =\n    currentConfig[config.linkKey] in config.links\n      ? currentConfig[config.linkKey]\n      : \"default\"\n  return (\n    <Section id={config.id} title={config.title}>\n      {config.back ? (\n        <Button link={config.back} buttonType=\"round back\"></Button>\n      ) : null}\n      {(config.links[linksKey] || []).map((x) => (\n        <Button key={x.link} {...x} questionKey={config.id} />\n      ))}\n    </Section>\n  )\n}\n\nconst readyToGenerateChartData = (config) =>\n  config &&\n  config.flavor &&\n  config.dataset &&\n  config.architecture &&\n  config.train &&\n  !(\"data\" in config)\n\nconst Training = () => {\n  const [configurations, setConfigurations] = useContext(PickContext)\n\n  useEffect(() => {\n    const getChartData = async () => {\n      let updated = false\n      const newConfigurations = { ...configurations }\n      for (let index in configurationKeys(configurations.selections)) {\n        if (readyToGenerateChartData(newConfigurations.selections[index])) {\n          const keyAndData = await configurationData(\n            newConfigurations.selections[index],\n            index\n          )\n          newConfigurations.selections[index] = {\n            ...newConfigurations.selections[index],\n            ...keyAndData,\n          }\n          updated = true\n        }\n      }\n      if (updated) setConfigurations(newConfigurations)\n    }\n    if (configurations) getChartData()\n  }, [configurations, setConfigurations])\n  const currentConfig =\n    configurations.selections[configurations.selections.current]\n  const title = `${currentConfig.train} Training In Progress...`\n  return (\n    <Section id=\"training\" title={title} autoslide={3000}>\n      <div className=\"loading\"></div>\n    </Section>\n  )\n}\n\nconst ResultSection = ({ chartData, refreshToken }) => {\n  const chartHeight = 350\n  return (\n    <div style={{ flex: 1, height: chartHeight, minHeight: chartHeight }}>\n      <Bar\n        key={refreshToken}\n        data={chartData || {}}\n        options={{ maintainAspectRatio: false, responsive: true }}\n      />\n    </div>\n  )\n}\n\nconst Results = () => {\n  const [configurations, setConfigurations] = useContext(PickContext)\n  const title =\n    configurations.selections.current > 0\n      ? \"Compare Training Results\"\n      : \"Training Results\"\n\n  const addComparison = () => {\n    const nextId = configurations.selections.current + 1\n    setConfigurations({\n      ...configurations,\n      selections: {\n        ...configurations.selections,\n        current: nextId,\n        [nextId]: {},\n      },\n    })\n  }\n\n  const refreshToken = Date.now()\n  const resetComparisons = () =>\n    setConfigurations({ selections: { current: 0, 0: {} } })\n\n  const data = chartData(configurations.selections)\n\n  return (\n    <Section id=\"results\" title={title}>\n      <div style={{ display: \"block\", minHeight: 360, height: 360 }}>\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <ResultSection chartData={data} refreshToken={refreshToken} />\n        </div>\n      </div>\n      <div className=\"loading-options\">\n        <Button\n          title=\"Start Over\"\n          link=\"flavor\"\n          buttonType=\"back pick\"\n          onClick={resetComparisons}\n        />\n        {data && data.datasets && data.datasets.length < 4 ? (\n          <Button title=\"Compare\" link=\"flavor\" onClick={addComparison} />\n        ) : null}\n      </div>\n      <br />\n    </Section>\n  )\n}\n\nconst Pick = () => {\n  return (\n    <PickContextProvider>\n      {Object.keys(questions).map((x) => (\n        <Question key={x} config={questions[x]} />\n      ))}\n      <Training />\n      <Results />\n    </PickContextProvider>\n  )\n}\n\nexport default Pick\n","import \"./App.css\"\nimport \"./Pick\"\nimport Pick from \"./Pick\"\nimport { useEffect } from \"react\"\nimport Reveal from \"reveal.js\"\nimport \"reveal.js/dist/reveal.css\"\nimport \"reveal.js/dist/theme/solarized.css\"\n\nconst App = () => {\n  useEffect(() => {\n    Reveal.initialize({\n      center: true,\n      history: true,\n      controls: false,\n      keyboard: false,\n    })\n  }, [])\n  return (\n    <div className=\"reveal\">\n      <div className=\"slides\">\n        <Pick />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}